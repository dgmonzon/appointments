/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.segmax.portlet.sample.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.segmax.portlet.sample.model.Appointment;
import com.segmax.portlet.sample.model.AppointmentModel;
import com.segmax.portlet.sample.model.AppointmentSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Appointment service. Represents a row in the &quot;KT_Appointment&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.segmax.portlet.sample.model.AppointmentModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AppointmentImpl}.
 * </p>
 *
 * @author segmax
 * @see AppointmentImpl
 * @see com.segmax.portlet.sample.model.Appointment
 * @see com.segmax.portlet.sample.model.AppointmentModel
 * @generated
 */
@JSON(strict = true)
public class AppointmentModelImpl extends BaseModelImpl<Appointment>
	implements AppointmentModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a appointment model instance should use the {@link com.segmax.portlet.sample.model.Appointment} interface instead.
	 */
	public static final String TABLE_NAME = "KT_Appointment";
	public static final Object[][] TABLE_COLUMNS = {
			{ "appId", Types.BIGINT },
			{ "appDate", Types.TIMESTAMP },
			{ "surgeryId", Types.BIGINT },
			{ "visitorId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table KT_Appointment (appId LONG not null primary key,appDate DATE null,surgeryId LONG,visitorId LONG)";
	public static final String TABLE_SQL_DROP = "drop table KT_Appointment";
	public static final String ORDER_BY_JPQL = " ORDER BY appointment.appId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY KT_Appointment.appId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.segmax.portlet.sample.model.Appointment"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.segmax.portlet.sample.model.Appointment"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.segmax.portlet.sample.model.Appointment"),
			true);
	public static long APPDATE_COLUMN_BITMASK = 1L;
	public static long SURGERYID_COLUMN_BITMASK = 2L;
	public static long VISITORID_COLUMN_BITMASK = 4L;
	public static long APPID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Appointment toModel(AppointmentSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Appointment model = new AppointmentImpl();

		model.setAppId(soapModel.getAppId());
		model.setAppDate(soapModel.getAppDate());
		model.setSurgeryId(soapModel.getSurgeryId());
		model.setVisitorId(soapModel.getVisitorId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Appointment> toModels(AppointmentSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Appointment> models = new ArrayList<Appointment>(soapModels.length);

		for (AppointmentSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.segmax.portlet.sample.model.Appointment"));

	public AppointmentModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _appId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAppId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _appId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Appointment.class;
	}

	@Override
	public String getModelClassName() {
		return Appointment.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("appId", getAppId());
		attributes.put("appDate", getAppDate());
		attributes.put("surgeryId", getSurgeryId());
		attributes.put("visitorId", getVisitorId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long appId = (Long)attributes.get("appId");

		if (appId != null) {
			setAppId(appId);
		}

		Date appDate = (Date)attributes.get("appDate");

		if (appDate != null) {
			setAppDate(appDate);
		}

		Long surgeryId = (Long)attributes.get("surgeryId");

		if (surgeryId != null) {
			setSurgeryId(surgeryId);
		}

		Long visitorId = (Long)attributes.get("visitorId");

		if (visitorId != null) {
			setVisitorId(visitorId);
		}
	}

	@JSON
	@Override
	public long getAppId() {
		return _appId;
	}

	@Override
	public void setAppId(long appId) {
		_appId = appId;
	}

	@JSON
	@Override
	public Date getAppDate() {
		return _appDate;
	}

	@Override
	public void setAppDate(Date appDate) {
		_columnBitmask |= APPDATE_COLUMN_BITMASK;

		if (_originalAppDate == null) {
			_originalAppDate = _appDate;
		}

		_appDate = appDate;
	}

	public Date getOriginalAppDate() {
		return _originalAppDate;
	}

	@JSON
	@Override
	public long getSurgeryId() {
		return _surgeryId;
	}

	@Override
	public void setSurgeryId(long surgeryId) {
		_columnBitmask |= SURGERYID_COLUMN_BITMASK;

		if (!_setOriginalSurgeryId) {
			_setOriginalSurgeryId = true;

			_originalSurgeryId = _surgeryId;
		}

		_surgeryId = surgeryId;
	}

	public long getOriginalSurgeryId() {
		return _originalSurgeryId;
	}

	@JSON
	@Override
	public long getVisitorId() {
		return _visitorId;
	}

	@Override
	public void setVisitorId(long visitorId) {
		_columnBitmask |= VISITORID_COLUMN_BITMASK;

		if (!_setOriginalVisitorId) {
			_setOriginalVisitorId = true;

			_originalVisitorId = _visitorId;
		}

		_visitorId = visitorId;
	}

	public long getOriginalVisitorId() {
		return _originalVisitorId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Appointment.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Appointment toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Appointment)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AppointmentImpl appointmentImpl = new AppointmentImpl();

		appointmentImpl.setAppId(getAppId());
		appointmentImpl.setAppDate(getAppDate());
		appointmentImpl.setSurgeryId(getSurgeryId());
		appointmentImpl.setVisitorId(getVisitorId());

		appointmentImpl.resetOriginalValues();

		return appointmentImpl;
	}

	@Override
	public int compareTo(Appointment appointment) {
		long primaryKey = appointment.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Appointment)) {
			return false;
		}

		Appointment appointment = (Appointment)obj;

		long primaryKey = appointment.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		AppointmentModelImpl appointmentModelImpl = this;

		appointmentModelImpl._originalAppDate = appointmentModelImpl._appDate;

		appointmentModelImpl._originalSurgeryId = appointmentModelImpl._surgeryId;

		appointmentModelImpl._setOriginalSurgeryId = false;

		appointmentModelImpl._originalVisitorId = appointmentModelImpl._visitorId;

		appointmentModelImpl._setOriginalVisitorId = false;

		appointmentModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Appointment> toCacheModel() {
		AppointmentCacheModel appointmentCacheModel = new AppointmentCacheModel();

		appointmentCacheModel.appId = getAppId();

		Date appDate = getAppDate();

		if (appDate != null) {
			appointmentCacheModel.appDate = appDate.getTime();
		}
		else {
			appointmentCacheModel.appDate = Long.MIN_VALUE;
		}

		appointmentCacheModel.surgeryId = getSurgeryId();

		appointmentCacheModel.visitorId = getVisitorId();

		return appointmentCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{appId=");
		sb.append(getAppId());
		sb.append(", appDate=");
		sb.append(getAppDate());
		sb.append(", surgeryId=");
		sb.append(getSurgeryId());
		sb.append(", visitorId=");
		sb.append(getVisitorId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("com.segmax.portlet.sample.model.Appointment");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>appId</column-name><column-value><![CDATA[");
		sb.append(getAppId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>appDate</column-name><column-value><![CDATA[");
		sb.append(getAppDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>surgeryId</column-name><column-value><![CDATA[");
		sb.append(getSurgeryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>visitorId</column-name><column-value><![CDATA[");
		sb.append(getVisitorId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Appointment.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Appointment.class
		};
	private long _appId;
	private Date _appDate;
	private Date _originalAppDate;
	private long _surgeryId;
	private long _originalSurgeryId;
	private boolean _setOriginalSurgeryId;
	private long _visitorId;
	private long _originalVisitorId;
	private boolean _setOriginalVisitorId;
	private long _columnBitmask;
	private Appointment _escapedModel;
}